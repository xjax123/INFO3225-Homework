/* autogenerated by Processing revision 1293 on 2024-03-28 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Project2 extends PApplet {

float camRotY;
PShader lighting;
PGraphics main,hud;
SceneManager manager = new SceneManager();
String devText = "";

public void setup() {
    /* size commented out by preprocessor */;
    main = createGraphics(1920,1061,P3D);
    main.smooth(8);
    hud = createGraphics(1920,1080,P2D);
    noStroke();

    //Shaders, still experementing with/testing these
    lighting = loadShader("./shaders/Lighting/lightingFrag.glsl","./shaders/Lighting/lightingVert.glsl");
    lighting.set("ambientColor", 150f, 150f, 150f);
    lighting.set("ambientStrength",1f);
    lighting.set("lightColor", 200f, 200f, 200f);
    lighting.set("lightDir", 0.2f, -1f, 0.6f);
    lighting.set("specStrength", 1f);
    lighting.set("viewPos",-200,-650,-400);


    //Generating Tiles, could in theory be put into a JSON to be loaded for later use.
    fill(50);
    PShape shape1 = createShape(BOX,50,1,50);
    MapTile m1 = new MapTile('T',shape1,true);
    tileMap.put('T',m1);
    fill(100);
    PShape shape2 = createShape(BOX,50,1,50);
    MapTile m2 = new MapTile('F',shape2,true);
    tileMap.put('F',m2);
    fill(25);
    PShape shape3 = createShape(BOX,50,50,50);
    shape3.translate(0,-25,0);
    MapTile m3 = new MapTile('W',shape3);
    tileMap.put('W',m3);
    fill(0xFFFFA500);
    PShape shape4 = createShape(BOX,50,1,50);
    shape4.translate(0,1,0);
    MapTile m4 = new DangerTile('L',shape4);
    tileMap.put('L',m4);
    fill(0,255,0);
    PShape shape5 = createShape(BOX,50,1,50);
    MapTile m5 = new WinTile('V',shape5);
    tileMap.put('V',m5);

    //Generating Entities, could in theory be put into a JSON to be loaded for later use.
    strokeWeight(1);
    stroke(0);
    fill(255,255,255);
    PShape ent1 = createShape(BOX,40,40,40);
    ent1.translate(0,-21,0);
    Player e1 = new Player(0,0,ent1);
    entityMap.put("player",e1);
    noStroke();

    Character[][] map1 = 
    {
        {'W','L','T','F','T','L'},
        {'W','L','b','b','F','L'},
        {'W','V','T','F','T','L'},
        {'W','L','b','b','F','L'},
        {'W','L','T','F','T','L'} 
    };
    NavMap navmap1 = new NavMap(map1);
    navmap1.registerEntity(entityMap.get("player"),2,3);
    manager.registerMap(navmap1);

    Character[][] map2 = 
    {
        {'T','V','W','F','T','F'},
        {'F','T','W','T','L','T'},
        {'T','F','W','F','L','F'},
        {'F','T','W','T','L','T'},
        {'T','F','W','F','L','F'},
        {'F','T','F','T','L','T'} 
    };
    NavMap navmap2 = new NavMap(map2);
    navmap2.registerEntity(entityMap.get("player"),5,5);
    manager.registerMap(navmap2);

    Character[][] map3 = 
    {                   //C
        {'W','W','T','F','T','b','b','b','V'},
        {'W','W','F','W','F','T','F','T','F'},
        {'T','F','T','W','b','b','b','b','b'},
        {'F','W','W','W','F','T','F','T','F'},
        {'T','F','T','W','T','b','b','b','T'},//C
        {'W','W','F','W','b','b','b','b','F'},
        {'T','F','T','W','T','F','T','b','T'},
        {'F','W','W','W','F','b','F','b','F'},
        {'T','F','T','F','T','b','T','F','T'}
    };
    NavMap navmap3 = new NavMap(map3);
    navmap3.registerEntity(entityMap.get("player"),4,4);
    manager.registerMap(navmap3);
}

public void draw() {
    main.beginDraw();
    //Background & Lighting
    main.background(50,50,60);

    //load main shader
    main.shader(lighting);

    //Camera
    main.beginCamera();
    main.camera();
    main.translate(1920/2,1080/2,0);
    main.rotateX(radians(-55));
    main.rotateY(radians(-20+camRotY));
    main.endCamera();
    //scene offset
    //dev marks, useful as a reference
    /*
    main.stroke(0, 255, 0, 255);
    main.strokeWeight(2);
    main.line(0, -1000, 0, 0, 1000, 0);
    main.stroke(255, 0, 0, 255);
    main.line(-1000, 0, 0, 1000, 0, 0);
    main.stroke(0, 0, 255, 255);
    main.line(0, 0, -1000, 0, 0, 1000);
    main.noStroke();
    main.fill(255);
    main.pushMatrix();
    main.translate(200,-650,400);
    main.sphere(10);
    main.popMatrix(); */

    //translating the scene to the center of the screen & drawing
    main.translate(-manager.getActiveMap().tiles.length*0.5f*50,0,-manager.getActiveMap().tiles[0].length*0.5f*50);
    manager.getActiveMap().drawMap(main);
    main.endDraw();

    hud.beginDraw();
    hud.background(0,0,0,0);
    hud.noStroke();
    hud.fill(255, 255, 255);
    hud.textSize(64);
    hud.text("Current Pos: "+devText, 0, 64);
    hud.text("Current State: "+manager.getPlayer().state, 0, 128);
    hud.endDraw();

    image(main,0,0);
    image(hud,0,0);
}

public void keyPressed() {
    NavMap act = manager.getActiveMap();
    if (key == 'w') {
        act.moveEnt(manager.getPlayer(),Direction.UP);
    }
    if (key == 's') {
        act.moveEnt(manager.getPlayer(),Direction.DOWN);
    }
    if (key == 'a') {
        act.moveEnt(manager.getPlayer(),Direction.LEFT);
    }
    if (key == 'd') {
        act.moveEnt(manager.getPlayer(),Direction.RIGHT);
    }
    if (key == 'r') {
        manager.reload();
    }
    if (key == 'q') {
        camRotY += 45;
    }
    if (key == 'e') {
        camRotY -= 45;
    }
    if (key == 10) {
        manager.nextScene();
    }
    if (camRotY < 0) {
        camRotY += 360;
    }
    if (camRotY > 360) {
        camRotY -= 360;
    }
}
class Animation {
    KeyFrame root;
    KeyFrame current;
    boolean looping;
}

class KeyFrame {
    public float time;
    public float rotX;
    public float rotY;
    public float rotZ;
    public PVector translate;

    public KeyFrame next;
    public KeyFrame prev;
}


HashMap<Character, MapTile> tileMap = new HashMap<Character, MapTile>();
HashMap<String, MapEntitiy> entityMap = new HashMap<String, MapEntitiy>();
enum Direction {
    UP,
    DOWN,
    LEFT,
    RIGHT
};

class NavMap {
    MapTile[][] tiles;
    MapEntitiy[][] entities;

    public NavMap(NavMap map) {
        tiles = new MapTile[map.tiles.length][map.tiles[0].length];
        entities = new MapEntitiy[map.tiles.length][map.tiles[0].length];
        for (int x = 0; x < tiles.length; x++) {
            for (int y = 0; y < tiles[x].length; y++) {
                if (map.tiles[x][y] == null) {
                    tiles[x][y] = new MapTile();
                } else {
                    MapTile tile = map.tiles[x][y];
                    tiles[x][y] = tileCopy(tile);
                }
                if (map.entities[x][y] != null) {
                    entities[x][y] = entityCopy(map.entities[x][y]);
                }
            }
        }
    }

    public NavMap(Character[][] _mapTiles) {
        int max = 0;
        for (int i = 0; i < _mapTiles.length; i++) {
            if (_mapTiles[i].length > max) {
                max = _mapTiles[i].length;
            }
        }
        tiles = new MapTile[_mapTiles.length][max];
        entities = new MapEntitiy[_mapTiles.length][max];
        for (int x = 0; x < tiles.length; x++) {
            for (int y = 0; y < tiles[x].length; y++) {
                if (_mapTiles[x][y] == null || _mapTiles[x][y] == 'b') {
                    tiles[x][y] = new MapTile();
                } else {
                    MapTile tile = tileMap.get(_mapTiles[x][y]);
                    tiles[x][y] = tileCopy(tile);
                }
            }
        }
    }
    public boolean inBounds(int x, int y) {
        if (x >= 0 && x < tiles.length) {
            if (y >= 0 && y < tiles[0].length) {
                return true;
            }
        }
        return false;
    }
    public MapEntitiy getPlayer() {
        for (int x = 0; x < tiles.length; x++) {
            for (int y = 0; y < tiles[x].length; y++) {
                if (entities[x][y] instanceof Player) {
                    return entities[x][y];
                }
            }
        }
        return null;
    }
    public void registerEntity(MapEntitiy ent, int x, int y) {
        entities[x][y] = entityCopy(ent);
        entities[x][y].mapX = x;
        entities[x][y].mapY = y;
        tiles[x][y].walkTile(ent);
    }

    public void positionEnt(MapEntitiy ent, int newX, int newY) {
        int prevX = ent.mapX;
        int prevY = ent.mapY;
        entities[newX][newY] = ent;
        ent.mapX = newX;
        ent.mapY = newY;
        entities[prevX][prevY] = null;
    }
    //remember to update to include collision detection
    public void moveEnt(MapEntitiy ent, Direction d) {
        if (ent.state == EntState.DEAD) {
            return;
        }

        if (d == Direction.UP) {
            int newY = ent.mapY-1;
            if (inBounds(ent.mapX,newY)) {
                if (tiles[ent.mapX][newY].walkable) {
                    tiles[ent.mapX][newY].walkTile(ent);
                    positionEnt(ent,ent.mapX,newY);
                }
            }
        } else if (d == Direction.DOWN) {
            int newY = ent.mapY+1;
            if (inBounds(ent.mapX,newY)) {
                if (tiles[ent.mapX][newY].walkable) {
                    tiles[ent.mapX][newY].walkTile(ent);
                    positionEnt(ent,ent.mapX,newY);
                }       
            }
        } else if (d == Direction.LEFT) {
            int newX = ent.mapX-1;
            if (inBounds(newX,ent.mapY)) {
                if (tiles[newX][ent.mapY].walkable) {
                    tiles[newX][ent.mapY].walkTile(ent);
                    positionEnt(ent,newX,ent.mapY);
                }
            }
        } else if (d == Direction.RIGHT) {
            int newX = ent.mapX+1;
            if (inBounds(newX,ent.mapY)) {
                if (tiles[newX][ent.mapY].walkable) {
                    tiles[newX][ent.mapY].walkTile(ent);
                    positionEnt(ent,newX,ent.mapY);
                }
            }
        }
    }

    public void drawMap(PGraphics buffer) {
        main.pushMatrix();
            for (int x = 0; x < tiles.length; x++) {
                main.translate(50,0,0);
                main.pushMatrix();
                    for (int y = 0; y < tiles[x].length; y++) {
                        main.translate(0,0,50);
                        if (entities[x][y] != null) {
                            if (entities[x][y].visible) {
                                main.shape(entities[x][y].shape,0,0);
                            }
                        }
                        if (tiles[x][y].visible) {
                            main.shape(tiles[x][y].shape,0,0);
                        }
                    }
                main.popMatrix();
            }
        main.popMatrix();
    }

    @Override
    public String toString() {
        String smap = "";
        smap += "[";
        for (int x = 0; x < tiles.length; x++) {
            smap += "{";
            for (int y = 0; y < tiles[x].length; y++) {
                smap += tiles[x][y].toString();
            }
            smap += "}";
        }
        smap += "]";
        return smap;
    }
}

//Tile Classes & Utils
class MapTile {
    public Character identifier;
    public PShape shape = createShape();
    public boolean walkable = false;
    public boolean visible = true;

    public MapTile() {
        identifier = 'b';
    }
    public MapTile(MapTile copy) {
        identifier = copy.identifier;
        shape = copy.shape;
        walkable = copy.walkable;
    }
    public MapTile(Character id, PShape _shape) {
        identifier = id;
        shape = _shape;
    }
    public MapTile(Character id, PShape _shape, boolean _walkable) {
        identifier = id;
        shape = _shape;
        walkable = _walkable;
    }

    public void setVisible(boolean b) {
        visible = b;
    }

    public void walkTile(MapEntitiy ent) {
        devText = "Walking on - "+identifier.toString();
    }

    @Override
    public String toString() {
        return identifier.toString();
    }
}

class DangerTile extends MapTile {
    public DangerTile(MapTile copy) {
        super(copy);
    }
    public DangerTile(Character id, PShape _shape) {
        super(id,_shape,true);
    }

    @Override
    public void walkTile(MapEntitiy ent) {
        super.walkTile(ent);
        ent.kill();
    }
}
class WinTile extends MapTile {
    public WinTile(MapTile copy) {
        super(copy);
    }
    public WinTile(Character id, PShape _shape) {
        super(id,_shape,true);
    }

    @Override
    public void walkTile(MapEntitiy ent) {
        super.walkTile(ent);
        manager.nextScene();
    }
}

public MapTile tileCopy(MapTile tile) {
    MapTile mt;
    if (tile instanceof DangerTile) {
        mt = new DangerTile(tile);
    } else if (tile instanceof WinTile) {
        mt = new WinTile(tile);
    } else {
        mt = new MapTile(tile);
    }
    return mt;
}

//Entity Classes & Utils
enum EntState {
    ALIVE,
    DEAD
}

class MapEntitiy {
    public int mapX;
    public int mapY;
    public PShape shape;
    public EntState state = EntState.ALIVE;
    public boolean visible = true;

    public MapEntitiy(MapEntitiy ent) {
        mapX = ent.mapX;
        mapY = ent.mapY;
        shape = ent.shape;
        state = ent.state;
        visible = ent.visible;
    }
    public MapEntitiy(int _x, int _y, PShape _shape) {
        mapX = _x;
        mapY = _y;
        shape = _shape;
    }

    public void collide() {}

    public void kill() {
        state = EntState.DEAD;
        visible = false;
    }
}

class Player extends MapEntitiy{
    public Player(MapEntitiy ent) {
        super(ent);
    }
    public Player(int _x, int _y, PShape _shape) {
        super(_x,_y,_shape);
    }
}

public MapEntitiy entityCopy(MapEntitiy ent) {
    MapEntitiy me;
    if (ent instanceof Player) {
        me = new Player(ent);
    } else {
        me = new MapEntitiy(ent);
    }
    return me;
}
class SceneManager {
    ArrayList<NavMap> maps = new ArrayList<NavMap>();
    int mapIndex = 0;
    MapEntitiy mainChar;
    NavMap activeMap;
    public SceneManager() {}

    public void registerMap(NavMap map) {
        maps.add(map);
        if (activeMap == null) {
           setActiveMap(map);
        }
    }

    public NavMap getActiveMap() {
        return activeMap;
    }

    public MapEntitiy getPlayer() {
        return mainChar;
    }
    public void reload() {
        setActiveMap(maps.get(mapIndex));
    }

    public void nextScene() {
        if (mapIndex+1 >= maps.size()) {
            mapIndex = -1;
        }
        mapIndex += 1;
        setActiveMap(maps.get(mapIndex));
    }

    private void setActiveMap(NavMap map) {
        activeMap = new NavMap(map);
        mainChar = activeMap.getPlayer();
    }
}


  public void settings() { size(1920, 1080, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Project2" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
